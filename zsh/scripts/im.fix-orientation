#!/usr/bin/env bash
function print_err {
	echo "$( basename "$0" ): error: $1"
	exit 1
}

function print_info {
	echo -e "---> $1"
}

HELP='fix-orientation v0.2
Fix the orientation of an image by not relying on the EXIF metadata.

$> '$( basename "$0" )' <infile> [outfile]

Sometimes, photos have been taken with a mobile and the taken has a 90 degrees clockwise or 180 degrees rotation.  In order to display it correctly in applications, the metadata contains information about this rotation.  However, some applications are not able to understand this information.  `fix-orientation` rotate the image and remove the metadata.

<infile>    The image input file to fix
<outfile>   The name of the output image (default will suffix original name with rotation angle)

OPTIONS
-------
-h|--help     Display this message
'

if [ $# -eq 0 ]
then
	printf '%s\n' "${HELP}"
	exit 1
fi
ARGS=("$@")

IN_FILE=
OUT_FILE=
for i in $( seq 0 $(($# - 1)) )
do
	ARG=${ARGS[$i]}
	case ${ARG} in
		"-h"|"--help")
			printf '%s\n' "${HELP}"
			exit 0
			;;
		*)
			if [ -z "${IN_FILE}" ]
			then
				IN_FILE=${ARG}
			elif [ -z "${OUT_FILE}" ]
			then
				OUT_FILE=${ARG}
			else
				print_err "Too many arguments. See '--help'."
			fi
			;;
	esac
done

ORIENTATION=$( exiftool "${IN_FILE}" | grep -i orientation | awk -F': ' '{print $2;}' )
echo "${IN_FILE} has orientation <${ORIENTATION}>"
if [ \! -z "${ORIENTATION}" ]
then
	ROTATE=0
	if [ "${ORIENTATION}" = "Rotate 90 CW" ]
	then
		ROTATE=90
	elif [ "${ORIENTATION}" = "Rotate 180" ]
	then
		ROTATE=180
	fi
	if [ -z "${OUT_FILE}" ]
	then
		OUT_FILE=$( echo ${IN_FILE} | sed -e 's/\(\.[^.]*\)$/\.'$ROTATE'\1/' )
	fi
	convert "${IN_FILE}" -rotate "${ROTATE}" "${OUT_FILE}"
	exiftool -P -overwrite_original_in_place "${OUT_FILE}" -Orientation=
fi
