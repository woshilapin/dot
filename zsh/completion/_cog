#compdef cog

autoload -U is-at-least

_cog() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
":: :_cog_commands" \
"*::: :->Cog" \
&& ret=0
    case $state in
    (Cog)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cog-command-$line[1]:"
        case $line[1] in
            (verify)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'::message -- The commit message:_files' \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
'::path -- path to init, default:_files' \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" \
'-l[Check commit history, starting from the latest tag to HEAD]' \
'--from-latest-tag[Check commit history, starting from the latest tag to HEAD]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(log)
_arguments "${_arguments_options[@]}" \
'*-t+[filter on commit type]' \
'*--type=[filter on commit type]' \
'*-a+[filter on commit author]' \
'*--author=[filter on commit author]' \
'*-s+[filter on commit scope]' \
'*--scope=[filter on commit scope]' \
'-B[filter BREAKING CHANGE commit]' \
'--breaking-change[filter BREAKING CHANGE commit]' \
'-e[omit error on the commit log]' \
'--no-error[omit error on the commit log]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(changelog)
_arguments "${_arguments_options[@]}" \
'(-a --at)-f+[Generate the changelog from this commit or tag ref, default latest tag]' \
'(-a --at)--from=[Generate the changelog from this commit or tag ref, default latest tag]' \
'(-a --at)-t+[Generate the changelog to this commit or tag ref, default HEAD]' \
'(-a --at)--to=[Generate the changelog to this commit or tag ref, default HEAD]' \
'(-f --from -t --to)-a+[Generate the changelog for a specific git tag]' \
'(-f --from -t --to)--at=[Generate the changelog for a specific git tag]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
(bump)
_arguments "${_arguments_options[@]}" \
'-v+[Manually set the next version]' \
'--version=[Manually set the next version]' \
'--pre=[Set the pre-release version]' \
'-c+[Specify path to hooks config file]' \
'--config=[Specify path to hooks config file]' \
'-a[Atomatically suggest the next version]' \
'--auto[Atomatically suggest the next version]' \
'-M[Increment the major version]' \
'--major[Increment the major version]' \
'-p[Increment the patch version]' \
'--patch[Increment the patch version]' \
'-m[Increment the minor version]' \
'--minor[Increment the minor version]' \
'-h[Prints help information]' \
'--help[Prints help information]' \
&& ret=0
;;
(install-hook)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':hook-type -- Type of hook to install:(pre-commit pre-push all)' \
&& ret=0
;;
(generate-completions)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
':type -- Type of completions to generate:(bash elvish fish zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-h[Prints help information]' \
'--help[Prints help information]' \
'-V[Prints version information]' \
'--version[Prints version information]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_cog_commands] )) ||
_cog_commands() {
    local commands; commands=(
        "verify:Verify a single commit message" \
"init:Install cog config files" \
"check:Verify all commit message against the conventional commit specification" \
"edit:Interactively rename invalid commit message" \
"log:Like git log but for conventional commits" \
"changelog:Display a changelog for a given commit oid range" \
"bump:Commit changelog from latest tag to HEAD and create a new tag" \
"install-hook:Add git hooks to the repository" \
"generate-completions:Generate shell completions" \
"help:Prints this message or the help of the given subcommand(s)" \
    )
    _describe -t commands 'cog commands' commands "$@"
}
(( $+functions[_cog__bump_commands] )) ||
_cog__bump_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog bump commands' commands "$@"
}
(( $+functions[_cog__changelog_commands] )) ||
_cog__changelog_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog changelog commands' commands "$@"
}
(( $+functions[_cog__check_commands] )) ||
_cog__check_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog check commands' commands "$@"
}
(( $+functions[_cog__edit_commands] )) ||
_cog__edit_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog edit commands' commands "$@"
}
(( $+functions[_cog__generate-completions_commands] )) ||
_cog__generate-completions_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog generate-completions commands' commands "$@"
}
(( $+functions[_cog__help_commands] )) ||
_cog__help_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog help commands' commands "$@"
}
(( $+functions[_cog__init_commands] )) ||
_cog__init_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog init commands' commands "$@"
}
(( $+functions[_cog__install-hook_commands] )) ||
_cog__install-hook_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog install-hook commands' commands "$@"
}
(( $+functions[_cog__log_commands] )) ||
_cog__log_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog log commands' commands "$@"
}
(( $+functions[_cog__verify_commands] )) ||
_cog__verify_commands() {
    local commands; commands=(
        
    )
    _describe -t commands 'cog verify commands' commands "$@"
}

_cog "$@"